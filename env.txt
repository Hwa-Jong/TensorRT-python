idle : Conda - VS code
OS : windows 10
Python : 3.10
CUDA : 11.3
cudnn : 8.6.0
Tensorflow : 2.10.0
Pytorch : 1.12
ONNX : 1.12.0
 - onnxruntime : 1.13
TensorRT : 8.5.1.7
opencv-python : 4.6.0

Notebook
GPU : GTX 1650ti


Env
1. install anaconda3
2. install vscode
3. make virtualenv python-3.10 in conda

4. install cuda 11.3
5. install cudnn 8.6.0
6. Reboot


install library
--- pytorch and tensorflow
1. pytorch 1.12
 - pip install torch==1.12.1+cu113 torchvision==0.13.1+cu113 torchaudio==0.12.1 --extra-index-url https://download.pytorch.org/whl/cu113
 - pip install pytorch_model_summary( for model summary ) 

2. tensorflow 2.10.0
 - pip install tensorflow==2.10.0

2-1 check gpu available
 - Run gpu_test.py

3. opencv-python
 - pip install opencv-python

( you can use torch_train.py )

--- onnx
4. onnxruntime
 - pip install onnxruntime

5. tf2onnx
 url : https://github.com/onnx/tensorflow-onnx
 - pip install -U tf2onnx

--- tensorRT
6. download tensorRT 8.5.1.7 [Link](https://developer.nvidia.com/nvidia-tensorrt-8x-download)
 - unzip
 - move TensorRT-8.5.1.7 directory to C:\
 - pip install <tensorrt_install_dir>/python/tensorrt-8.x.x.x-cp<python_ver>-none-linux_x86_64.whl
 ( in my case : C:\TensorRT-8.5.1.7\python\tensorrt-8.5.1.7-cp310-none-win_amd64.whl )
 - add environment path TensorRT-8.5.1.7\lib  ( in my case : C:\TensorRT-8.5.1.7\lib )
 - reboot

7. download zlibwapi.dll
 [Link](https://docs.nvidia.com/deeplearning/cudnn/install-guide/index.html#install-zlib-windows
 - move zlibwapi.dll to C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\bin\

8. install pycuda
 - pip install pycuda

9. make .trt model
 - open command
 - ( onnx_torch )C:\TensorRT-8.5.1.7\bin\trtexec  --onnx=vgg_torch.onnx --saveEngine=vgg_torch.trt
 - ( onnx_tf )C:\TensorRT-8.5.1.7\bin\trtexec  --onnx=vgg_tf.onnx --saveEngine=vgg_tf.trt
